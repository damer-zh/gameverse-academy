import { useState, useRef, useCallback, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { 
  Bot, 
  X, 
  MessageCircle, 
  BookOpen, 
  Lightbulb,
  Sparkles,
  ChevronUp,
  ChevronDown,
  Maximize2,
  Minimize2
} from 'lucide-react';

const AIAssistant = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [isMaximized, setIsMaximized] = useState(false);
  const [windowSize, setWindowSize] = useState({ width: 320, height: 480 });
  const [isResizing, setIsResizing] = useState(false);
  const [resizeStart, setResizeStart] = useState({ x: 0, y: 0, width: 0, height: 0 });
  
  const windowRef = useRef<HTMLDivElement>(null);
  const resizeHandleRef = useRef<HTMLDivElement>(null);
  
  const [messages, setMessages] = useState<Array<{ type: 'user' | 'assistant', content: string, timestamp: Date }>>([
    {
      type: 'assistant',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ Shu School. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
      timestamp: new Date()
    }
  ]);

  const quickActions = [
    {
      id: 'courses',
      title: '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫—É—Ä—Å',
      icon: <BookOpen className="w-4 h-4" />,
      action: () => handleQuickAction('courses')
    },
    {
      id: 'help',
      title: '–ö–∞–∫ —É—á–∏—Ç—å—Å—è',
      icon: <Lightbulb className="w-4 h-4" />,
      action: () => handleQuickAction('help')
    },
    {
      id: 'motivation',
      title: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è',
      icon: <Sparkles className="w-4 h-4" />,
      action: () => handleQuickAction('motivation')
    }
  ];

  const handleQuickAction = (action: string) => {
    let response = '';
    
    switch (action) {
      case 'courses':
        response = '–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫—É—Ä—Å "Unity –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö" - –æ–Ω –¥–∞—Å—Ç –≤–∞–º –ø—Ä–æ—á–Ω—É—é –æ—Å–Ω–æ–≤—É. –ï—Å–ª–∏ —É–∂–µ –∑–Ω–∞–∫–æ–º—ã —Å Unity, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é Unity —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É". –ê –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ - "C# –¥–ª—è –≥–µ–π–º–¥–µ–≤–∞" –±—É–¥–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–º –≤—ã–±–æ—Ä–æ–º! üéÆ';
        break;
      case 'help':
        response = '–í–æ—Ç –º–æ–π —Å–æ–≤–µ—Ç –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é:\n\n1Ô∏è‚É£ –£–¥–µ–ª—è–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–µ –º–∏–Ω–∏–º—É–º 1-2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å\n2Ô∏è‚É£ –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è - –æ–Ω–∏ –∑–∞–∫—Ä–µ–ø–ª—è—é—Ç –∑–Ω–∞–Ω–∏—è\n3Ô∏è‚É£ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –¥–ª—è –æ–±–º–µ–Ω–∞ –æ–ø—ã—Ç–æ–º\n4Ô∏è‚É£ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –∫—É—Ä—Å–æ–º\n5Ô∏è‚É£ –ù–µ –±–æ–π—Ç–µ—Å—å –æ—à–∏–±–æ–∫ - –æ–Ω–∏ –ª—É—á—à–∏–µ —É—á–∏—Ç–µ–ª—è! üí™';
        break;
      case 'motivation':
        response = '–ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π –≤–µ–ª–∏–∫–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä –∫–æ–≥–¥–∞-—Ç–æ –±—ã–ª –Ω–æ–≤–∏—á–∫–æ–º! üöÄ\n\n–í–∞—à–∏ –ø–µ—Ä–≤—ã–µ –∏–≥—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏, –Ω–æ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ—á–∫–∞ –∫–æ–¥–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –º–µ—á—Ç–µ. –°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ Minecraft - –æ–Ω –Ω–∞—á–∏–Ω–∞–ª—Å—è —Å –ø—Ä–æ—Å—Ç—ã—Ö –±–ª–æ–∫–æ–≤, –∞ —Å—Ç–∞–ª –ª–µ–≥–µ–Ω–¥–æ–π!\n\n–ì–ª–∞–≤–Ω–æ–µ - –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –ª—É—á—à–µ! ‚≠ê';
        break;
      default:
        response = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫!';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setMessages(prev => [...prev, {
      type: 'user',
      content: quickActions.find(qa => qa.id === action)?.title || '–î–µ–π—Å—Ç–≤–∏–µ',
      timestamp: new Date()
    }]);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–º–æ—â–Ω–∏–∫–∞
    setTimeout(() => {
      setMessages(prev => [...prev, {
        type: 'assistant',
        content: response,
        timestamp: new Date()
      }]);
    }, 500);
  };

  const toggleMinimize = () => {
    setIsMinimized(!isMinimized);
  };

  const toggleMaximize = () => {
    if (isMaximized) {
      setWindowSize({ width: 320, height: 480 });
    } else {
      setWindowSize({ width: Math.min(600, window.innerWidth - 48), height: Math.min(700, window.innerHeight - 48) });
    }
    setIsMaximized(!isMaximized);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
  const handleMouseDown = useCallback((e: React.MouseEvent) => {
    if (isMaximized) return;
    
    setIsResizing(true);
    setResizeStart({
      x: e.clientX,
      y: e.clientY,
      width: windowSize.width,
      height: windowSize.height
    });
  }, [isMaximized, windowSize]);

  const handleMouseMove = useCallback((e: MouseEvent) => {
    if (!isResizing) return;

    const deltaX = e.clientX - resizeStart.x;
    const deltaY = e.clientY - resizeStart.y;

    const newWidth = Math.max(280, Math.min(800, resizeStart.width + deltaX));
    const newHeight = Math.max(400, Math.min(900, resizeStart.height + deltaY));

    setWindowSize({ width: newWidth, height: newHeight });
  }, [isResizing, resizeStart]);

  const handleMouseUp = useCallback(() => {
    setIsResizing(false);
  }, []);

  // –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
  useEffect(() => {
    if (isResizing) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      
      return () => {
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
      };
    }
  }, [isResizing, handleMouseMove, handleMouseUp]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    const handleResize = () => {
      if (isMaximized) {
        setWindowSize({ 
          width: Math.min(600, window.innerWidth - 48), 
          height: Math.min(700, window.innerHeight - 48) 
        });
      }
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [isMaximized]);

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={() => setIsOpen(true)}
          className="w-16 h-16 rounded-full bg-gradient-to-r from-accent to-accent/80 hover:from-accent/90 hover:to-accent/70 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110"
        >
          <Bot className="w-8 h-8" />
        </Button>
        
        {/* –ü—É–ª—å—Å–∏—Ä—É—é—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
        <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full animate-pulse"></div>
        
        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
        <div className="absolute bottom-full right-0 mb-2 px-3 py-2 bg-card text-card-foreground text-sm rounded-lg shadow-lg opacity-0 hover:opacity-100 transition-opacity duration-300 pointer-events-none whitespace-nowrap">
          –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ Shu School
        </div>
      </div>
    );
  }

  return (
    <div 
      ref={windowRef}
      className="fixed bottom-6 right-6 z-50 transition-all duration-300 ease-out"
      style={{ 
        width: isMaximized ? 'calc(100vw - 48px)' : `${windowSize.width}px`,
        height: isMaximized ? 'calc(100vh - 48px)' : `${windowSize.height}px`,
        maxWidth: isMaximized ? 'none' : '800px',
        maxHeight: isMaximized ? 'none' : '900px',
        minWidth: isMaximized ? 'none' : '280px',
        minHeight: isMaximized ? 'none' : '400px'
      }}
    >
      <Card className="glass-card shadow-2xl border-accent/20 h-full flex flex-col">
        <CardHeader className="pb-3 flex-shrink-0">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2 sm:space-x-3 min-w-0">
              <div className="w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-gradient-to-r from-accent to-accent/80 flex items-center justify-center flex-shrink-0">
                <Bot className="w-4 h-4 sm:w-6 sm:h-6 text-white" />
              </div>
              <div className="min-w-0">
                <CardTitle className="text-sm sm:text-lg font-medium text-foreground truncate">
                  Shu Assistant
                </CardTitle>
                <div className="flex items-center space-x-2">
                  <Badge variant="secondary" className="bg-green-500/20 text-green-500 text-xs">
                    –û–Ω–ª–∞–π–Ω
                  </Badge>
                  {!isMaximized && (
                    <Badge variant="outline" className="border-muted-foreground/30 text-xs hidden sm:inline-flex">
                      {windowSize.width}√ó{windowSize.height}
                    </Badge>
                  )}
                </div>
              </div>
            </div>
            
            <div className="flex items-center space-x-1 flex-shrink-0">
              <Button
                variant="ghost"
                size="sm"
                onClick={toggleMinimize}
                className="h-6 w-6 sm:h-8 sm:w-8 p-0 hover:bg-muted/50"
                title={isMinimized ? '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å' : '–°–≤–µ—Ä–Ω—É—Ç—å'}
              >
                {isMinimized ? <ChevronUp className="w-3 h-3 sm:w-4 sm:h-4" /> : <ChevronDown className="w-3 h-3 sm:w-4 sm:h-4" />}
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={toggleMaximize}
                className="h-6 w-6 sm:h-8 sm:w-8 p-0 hover:bg-muted/50"
                title={isMaximized ? '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω'}
              >
                {isMaximized ? <Minimize2 className="w-3 h-3 sm:w-4 sm:h-4" /> : <Maximize2 className="w-3 h-3 sm:w-4 sm:h-4" />}
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsOpen(false)}
                className="h-6 w-6 sm:h-8 sm:w-8 p-0 hover:bg-muted/50"
                title="–ó–∞–∫—Ä—ã—Ç—å"
              >
                <X className="w-3 h-3 sm:w-4 sm:h-4" />
              </Button>
            </div>
          </div>
        </CardHeader>

        {!isMinimized && (
          <>
            <CardContent className="space-y-4 flex-1 overflow-hidden flex flex-col">
              {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
              <div className="space-y-2 flex-shrink-0">
                <p className="text-sm text-muted-foreground font-medium">
                  –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
                </p>
                <div className={`grid gap-2 ${
                  windowSize.width > 400 ? 'grid-cols-2' : 'grid-cols-1'
                }`}>
                  {quickActions.map((action) => (
                    <Button
                      key={action.id}
                      variant="outline"
                      size="sm"
                      onClick={action.action}
                      className="justify-start border-muted-foreground/30 hover:border-accent hover:text-accent h-auto py-2 px-3 text-xs sm:text-sm"
                    >
                      {action.icon}
                      <span className="ml-2 text-left truncate">{action.title}</span>
                    </Button>
                  ))}
                </div>
              </div>

              {/* –î–∏–∞–ª–æ–≥ */}
              <div className="space-y-3 flex-1 flex flex-col min-h-0">
                <p className="text-sm text-muted-foreground font-medium flex-shrink-0">
                  –î–∏–∞–ª–æ–≥:
                </p>
                <div className="flex-1 overflow-y-auto space-y-3 pr-2 min-h-0">
                  {messages.map((message, index) => (
                    <div
                      key={index}
                      className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div
                        className={`max-w-[85%] p-2 sm:p-3 rounded-lg text-xs sm:text-sm ${
                          message.type === 'user'
                            ? 'bg-accent text-accent-foreground'
                            : 'bg-muted/50 text-foreground'
                        }`}
                      >
                        <div className="whitespace-pre-line break-words">{message.content}</div>
                        <div className={`text-xs mt-1 ${
                          message.type === 'user' ? 'text-accent-foreground/70' : 'text-muted-foreground'
                        }`}>
                          {message.timestamp.toLocaleTimeString('ru-RU', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* –°—Ç–∞—Ç—É—Å */}
              <div className="text-center flex-shrink-0">
                <Badge variant="outline" className="border-muted-foreground/30 text-xs">
                  <MessageCircle className="w-3 h-3 mr-1" />
                  <span className="hidden sm:inline">–ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å</span>
                  <span className="sm:hidden">–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å</span>
                </Badge>
              </div>
            </CardContent>
          </>
        )}
        
        {/* –†—É—á–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ */}
        {!isMinimized && !isMaximized && (
          <div
            ref={resizeHandleRef}
            className="absolute bottom-0 right-0 w-8 h-8 cursor-se-resize opacity-0 hover:opacity-100 transition-opacity duration-200 group"
            onMouseDown={handleMouseDown}
            title="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä (–ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞)"
          >
            <div className="w-full h-full flex items-end justify-end p-1">
              <div className="w-4 h-4 border-r-2 border-b-2 border-accent/50 rounded-br-sm group-hover:border-accent transition-colors duration-200"></div>
            </div>
          </div>
        )}
      </Card>
    </div>
  );
};

export default AIAssistant; 